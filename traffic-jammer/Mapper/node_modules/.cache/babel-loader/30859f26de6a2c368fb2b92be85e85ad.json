{"ast":null,"code":"var _jsxFileName = \"/home/tomascosta/Downloads/IES/iesproject_trafficjammer/traffic-jammer/Mapper/src/views/examples/MapperPage.js\";\n\n/*!\n\n=========================================================\n* Paper Kit React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-kit-react\n\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/paper-kit-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport map_data_json from \"../../data/Mapdata\";\nimport { render } from 'react-dom';\nimport { Stage, Layer, Star, Line, Circle, Text } from 'react-konva'; // reactstrap components\n\nimport { Button, Form, Input, Container, Row, Col } from \"reactstrap\"; // core components\n\nimport ExamplesNavbar from \"components/Navbars/ExamplesNavbar.js\";\nlet window_height = 400;\nlet window_width = 800;\nvar map_data;\n\nfunction analyse_streets(begx, begy, endx, endy, color, direction) {\n  var delta_x, delta_y, points;\n  delta_x = endx - begx;\n  delta_y = endy - begy;\n  points = [];\n\n  if (direction) {\n    points = [0, 0, delta_x, delta_y]; //color = \"green\"\n  } else {\n    points = [!delta_x * 5, !delta_y * 5, delta_x + !delta_x * 5, delta_y + !delta_y * 5];\n\n    if (delta_x != 0 && delta_y != 0) {\n      points = [0, 5, delta_x - 5, delta_y];\n    } //color = \"yellow\"\n\n  }\n\n  return React.createElement(Line, {\n    x: begx,\n    y: begy,\n    points: points,\n    stroke: color,\n    strokeWidth: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  });\n}\n\nfunction fill_map() {\n  //makeRemoteRequest();\n  //Adicionar isto assim que tivermos o pedido\n  map_data = map_data_json;\n\n  for (let index = 0; index < map_data.length; index++) {\n    const trecho = map_data[index];\n    console.log(trecho + index);\n  }\n}\n\nfunction makeRemoteRequest() {\n  console.log(\"Here\");\n  return fetch('127.0.0.1:8000/info_street/').then(response => response.json()).then(responseJson => {\n    map_data = responseJson;\n    console.log(responseJson);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nfunction RegisterPage() {\n  document.documentElement.classList.remove(\"nav-open\");\n  React.useEffect(() => {\n    document.body.classList.add(\"register-page\");\n    return function cleanup() {\n      document.body.classList.remove(\"register-page\");\n    };\n  });\n  return React.createElement(React.Fragment, null, React.createElement(ExamplesNavbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"page-header\",\n    \"data-parallax\": true,\n    style: {\n      backgroundColor: 'rgba(0,0,0,.76)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(Row, {\n    style: {\n      alignContent: 'center',\n      justifyContent: 'center',\n      border: 10,\n      borderColor: 'white'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontWeight: 'bold',\n      fontSize: 30\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Map Analysis for: Espinho\"), React.createElement(Stage, {\n    width: window_width,\n    height: window_height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Layer, {\n    id: \"map\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, analyse_streets(250, 100, 350, 100, \"green\", true), analyse_streets(250, 100, 350, 100, \"green\", false), analyse_streets(350, 100, 450, 100, \"red\", true), analyse_streets(350, 100, 450, 100, \"green\", false), analyse_streets(450, 100, 550, 100, \"yellow\", true), analyse_streets(450, 100, 550, 100, \"red\", false)))))));\n}\n\nexport default RegisterPage;","map":{"version":3,"sources":["/home/tomascosta/Downloads/IES/iesproject_trafficjammer/traffic-jammer/Mapper/src/views/examples/MapperPage.js"],"names":["React","map_data_json","render","Stage","Layer","Star","Line","Circle","Text","Button","Form","Input","Container","Row","Col","ExamplesNavbar","window_height","window_width","map_data","analyse_streets","begx","begy","endx","endy","color","direction","delta_x","delta_y","points","fill_map","index","length","trecho","console","log","makeRemoteRequest","fetch","then","response","json","responseJson","catch","error","RegisterPage","document","documentElement","classList","remove","useEffect","body","add","cleanup","backgroundColor","alignContent","justifyContent","border","borderColor","fontWeight","fontSize"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Paper Kit React - v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/paper-kit-react\n\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/paper-kit-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\nimport map_data_json from \"../../data/Mapdata\"\nimport { render } from 'react-dom';\nimport { Stage, Layer, Star,Line,Circle, Text } from 'react-konva';\n// reactstrap components\nimport { Button, Form, Input, Container, Row, Col } from \"reactstrap\";\n\n// core components\nimport ExamplesNavbar from \"components/Navbars/ExamplesNavbar.js\";\n\nlet window_height = 400;\nlet window_width = 800;\n\nvar map_data;\n\nfunction analyse_streets(begx, begy, endx, endy, color,direction){\n  var delta_x,delta_y,points\n  delta_x = endx - begx\n  delta_y = endy - begy\n  points = []\n\n  if (direction){\n    points = [0,0,delta_x, delta_y]\n    //color = \"green\"\n  } else {\n    points = [!(delta_x)*5, !(delta_y)*5,delta_x+!(delta_x)*5,delta_y+!(delta_y)*5]\n    if (delta_x != 0 && delta_y != 0){\n      points = [0,5,delta_x-5,delta_y]\n    }\n    //color = \"yellow\"\n  }\n  return (\n    <Line \n      x = {begx}\n      y = {begy}\n      points={points}\n      stroke = {color}\n      strokeWidth = {4}\n    />\n  )\n}\n\nfunction fill_map(){\n  //makeRemoteRequest();\n  //Adicionar isto assim que tivermos o pedido\n  map_data = map_data_json\n\n  for (let index = 0; index < map_data.length; index++) {\n    const trecho = map_data[index];\n    console.log(trecho + index)\n  }\n  \n\n}\n\nfunction makeRemoteRequest(){\n    console.log(\"Here\");\n    return fetch('127.0.0.1:8000/info_street/')\n    .then ( (response) => response.json() )\n    .then ( (responseJson) =>{\n    \n    map_data = responseJson;\n    console.log(responseJson);\n\n    })\n  .catch((error) => {\n    console.log(error);\n  });\n  \n}\n\nfunction RegisterPage() {\n  document.documentElement.classList.remove(\"nav-open\");\n  React.useEffect(() => {\n    document.body.classList.add(\"register-page\");\n    return function cleanup() {\n      document.body.classList.remove(\"register-page\");\n    };\n  });\n  return (\n    <>\n      <ExamplesNavbar />\n      <div\n        className=\"page-header\"\n        data-parallax={true}\n        style={{\n          backgroundColor:'rgba(0,0,0,.76)',\n        }}\n      >\n        <div className=\"\" />\n        <Container>\n          <Row style={{alignContent:'center',justifyContent:'center',border:10,borderColor:'white'}}>\n            <Text style={{color:'white', fontWeight:'bold', fontSize:30}}>Map Analysis for: Espinho</Text>\n            <Stage width={window_width} height={window_height}>\n                <Layer id=\"map\">\n                  {analyse_streets(250, 100, 350, 100, \"green\", true)}\n                  {analyse_streets(250, 100, 350, 100, \"green\", false)}\n                  {analyse_streets(350, 100, 450, 100, \"red\", true)}\n                  {analyse_streets(350, 100, 450, 100, \"green\", false)}\n                  {analyse_streets(450, 100, 550, 100, \"yellow\", true)}\n                  {analyse_streets(450, 100, 550, 100, \"red\", false)}\n\n                {/* Aqui fazer as linhas (mudar isto para um for e dar draw automatico, mt cancer para ja)*/}\n                {/* 1 linha */}\n                {/*<Line\n                  x={250}\n                  y={100}\n                  points={[0, !(50), !(0)*100, 0]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={250}\n                  y={100}\n                  points={[0, 5, 100, 5]}\n                  stroke=\"yellow\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={450}\n                  y={100}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n                  {/* 2 linha \n                <Line\n                  x={250}\n                  y={200}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={350}\n                  y={200}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={450}\n                  y={200}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n                {/* 3 linha \n\n                <Line\n                  x={250}\n                  y={300}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={350}\n                  y={300}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={450}\n                  y={300}\n                  points={[0, 0, 100, 0]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n\n                {/* Agora fazer as colunas */}\n                {/* 1 coluna\n                <Line\n                  x={250}\n                  y={100}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={250}\n                  y={200}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n\n                {/* 2 coluna \n                <Line\n                  x={350}\n                  y={100}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={350}\n                  y={200}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n\n                {/* 3 coluna \n                <Line\n                  x={450}\n                  y={100}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={450}\n                  y={200}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"yellow\"\n                  strokeWidth=\"4\"            \n                />\n\n                {/* 4 coluna \n                <Line\n                  x={550}\n                  y={100}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={550}\n                  y={200}\n                  points={[0, 0, 0, 100]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n\n                {/* Diagonais \n                <Line\n                  x={250}\n                  y={100}\n                  points={[0, 0, 100, 100]}\n                  stroke=\"green\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={250}\n                  y={100}\n                  points={[5, 0, 100, 95]}\n                  stroke=\"yellow\"\n                  strokeWidth=\"4\"            \n                />\n                <Line\n                  x={450}\n                  y={200}\n                  points={[0, 0, 120, -120]}\n                  stroke=\"red\"\n                  strokeWidth=\"4\"            \n                />*/}\n\n                </Layer>\n            </Stage>\n          </Row>\n        </Container>\n\n      </div>\n    </>\n  );\n}\n\nexport default RegisterPage;\n"]},"metadata":{},"sourceType":"module"}